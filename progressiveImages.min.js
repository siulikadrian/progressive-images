(function () {
/**
 * Created by asiulik on 2017-03-06.
 */
define('config',[], function () {

    var config = {};

    config.IMAGE_STRATEGY = 'image';
    config.POSTER_STRATEGY = 'poster';
    config.LINK_STRATEGY = 'href';
    config.BACKGROUND_STRATEGY = 'background';

    config.avalaibleStrategy = [
        config.IMAGE_STRATEGY,
        config.BACKGROUND_STRATEGY,
        config.POSTER_STRATEGY,
        config.LINK_STRATEGY
    ];
    config.attrNameSlug = 'progressive-image-src';
    config.positionAttrSlug = 'focus-image-config';
    config.progressiveImageVisibleClass = 'progressive__image--visible';
    config.isLazyLoadStrategy = false;

    config.breakpoints = ["none", "w360", "w480", "w768", "w768@2x", "w1280", "w1280@2x", "w1920", "w2560", "w3840"];

    return config;

});
/**
 * Created by asiulik on 2017-03-06.
 */

define('utils/inViewport',[], function(){

   return function isElementInViewport(element, fullyInView){

       var pageTop = $(window).scrollTop();
       var pageBottom = pageTop + $(window).height();
       var elementTop = $(element).offset().top;
       var elementBottom = elementTop + parseInt($(element).css('height'));

       if (fullyInView === true) {
           return ((pageTop < elementTop) && (pageBottom > elementBottom));
       } else {
           return ((elementTop <= pageBottom) && (elementBottom >= pageTop));
       }

   }

});
/**
 * Created by asiulik on 2017-03-06.
 */

define('utils/setBgImage',[], function(){

    return function setBgImage(element, src) {

        if (element) {
            element.style.backgroundImage = 'url("' + src + '")';
            return element;
        }

    }

});
/**
 * Created by asiulik on 2017-03-06.
 */
define('utils/getBreakpoint',[], function(){

    return function getBreakpoint(){

        return window.getComputedStyle(document.body, ":after")
        .getPropertyValue("content")
        .replace(/\"|\'/g, "");

    }

});
/**
 * Created by asiulik on 2017-03-06.
 */

define('utils/utils',[
        './inViewport',
        './setBgImage',
        './getBreakpoint'
], function(isElementInView, setBgImage, getBreakpoint){

    return {
        isElementInView: isElementInView,
        setBgImage: setBgImage,
        getBreakpoint: getBreakpoint
    };
    
});

/**
 * Created by asiulik on 2017-03-06.
 */
define('image',[
    'jquery',
    'lodash',
    './config',
    './utils/utils'
], function ($, _, Config, Utils) {

    function ProgressiveImage(el, options) {
        this.element = el;
        this.options = _.assign(this.options, options || {});
    }

    ProgressiveImage.prototype.options = {

        requestOnVisible: true,
        strategy: "image",
        breakpoints: Config.breakpoints

    };

    ProgressiveImage.prototype.createBreakpointConfig = function (breakpointObj, progressiveImageConfig) {

        var arrFromAttr = progressiveImageConfig.split(',');

        _.each(arrFromAttr, function (value) {

            var splited = value.split(" ");

            if (arrFromAttr[0] === 'none')
                isLazyLoadStrategy = true;

            breakpointObj[splited[0]] = splited[1];

        });

        return breakpointObj;

    };

    ProgressiveImage.prototype.init = function () {

        this.$element = $(this.element);
        this.breakpointsConfigObj = {};

        var _this = this;

        this.breakpointsConfigObj.none = getUrl(this.element, this.options.strategy);

        this.createBreakpointConfig(this.breakpointsConfigObj, this.element.getAttribute(Config.attrNameSlug));

        this.setPositionConfig();

        if (!this.options.requestOnVisible) {
            this.checkBreakpoint();
        }

        this.$element = $(this.element);

        $(window).on('resize orientationchange', function () {
            _this.checkBreakpoint();
        });

        this.checkViewportTh = function () {

            if (_this.visible) return;

            var isInViewport = Utils.isElementInView(_this.$element);

            if (isInViewport) {

                _this.visible = true;
                _this.checkBreakpoint();

            }
        };

        this.checkViewportTh();

        $(window).on('scroll load', this.checkViewportTh);
        $(window).on('resize', this.checkViewportTh);

    };

    ProgressiveImage.prototype.setPositionConfig = function () {

        var _this = this;
        var arrBgPosition = this.element.getAttribute(Config.positionAttrSlug);

        if (arrBgPosition) {

            this.positionConfig = {};

            arrBgPosition.split(',').map(function (item) {

                var configPair = item.split(' ');

                _this.positionConfig[configPair[0]] = {
                    x: configPair[1].split("/")[0],
                    y: configPair[1].split("/")[1]
                };
            });
        }
    };

    ProgressiveImage.prototype.getAvailableBreakpoint = function (breakpointValue, breakpointsConfig, availableBreakpointsCollection) {

        var breakpoint;
        var availableBreakpoints = availableBreakpointsCollection;

        if (!breakpointsConfig[breakpointValue]) {
            for (var t = availableBreakpoints.indexOf(breakpointValue); t >= 0; t--)
                if ("undefined" != typeof breakpointsConfig[availableBreakpoints[t]]) {
                    breakpoint = availableBreakpoints[t];
                    break
                }
        } else {
            breakpoint = breakpointValue;
        }

        return breakpoint;

    };

    ProgressiveImage.prototype.getImage = function (breakpointValue) {

        var _this = this;

        var breakpoint = this.getAvailableBreakpoint(
                breakpointValue,
                this.breakpointsConfigObj,
                this.options.breakpoints
        );

        var newImg = new Image;

        if (_this.positionConfig) {
            var position = this.positionConfig[breakpoint] || this.positionConfig['none'];
            updatePosition(this.element, this.options.strategy, position);
        }

        if (this.options.forceUpdate) {
            updateSrc(this.breakpointsConfigObj[breakpoint], _this.element, _this.options.strategy);
        }

        newImg.src = this.breakpointsConfigObj[breakpoint];

        newImg.onload = function () {
            updateSrc(newImg.src, _this.element, _this.options.strategy);
        };

    };

    ProgressiveImage.prototype.checkBreakpoint = function () {

        if (this.options.requestOnVisible && !this.visible) return;

        if (this.currentBreakPoint !== getBreakpoint()) {
            this.currentBreakPoint = getBreakpoint();
            this.getImage(this.currentBreakPoint);
        }

    };

    ProgressiveImage.prototype.delete = function () {
        if (this.checkViewportTh) {
            $(window).off('scroll', this.checkViewportTh);
            $(window).off('resize', this.checkViewportTh);
        }
    };

    function updatePosition(element, strategy, position) {

        if (!position) position = {};

        position.x = position.x || 0.5;
        position.y = position.y || 0.5;

        if (strategy === Config.BACKGROUND_STRATEGY) {

            element.style.backgroundPosition =
                    _mapPositionToPercent(position.x) + ' ' + _mapPositionToPercent(position.y)
        }
    }

    function getStrategyTypeByTagName(tagName) {

        var strategy;

        switch (tagName) {

            case 'IMG':
                strategy = Config.IMAGE_STRATEGY;
                break;

            case 'VIDEO':
                strategy = Config.POSTER_STRATEGY;
                break;

            case 'A':
                strategy = Config.LINK_STRATEGY;
                break;

            default:
                strategy = Config.BACKGROUND_STRATEGY;
        }

        return strategy;

    }

    function updateSrc(src, element) {

        var strategy = getStrategyTypeByTagName(element.tagName);

        if (strategy === Config.IMAGE_STRATEGY) {
            element.src = src;
        }

        if (strategy === Config.LINK_STRATEGY) {
            element.href = src;
        }

        if (strategy === Config.POSTER_STRATEGY) {
            Utils.setBgImage(element, src);
        }

        if (strategy === Config.BACKGROUND_STRATEGY) {
            Utils.setBgImage(element, src);
        }

        return element;
    }

    function getUrl(element, strategy) {

        if (strategy === Config.IMAGE_STRATEGY) {
            return element.src;
        }

        if (strategy === Config.BACKGROUND_STRATEGY) {
            var backgroundImage = element.style.backgroundImage;
            return backgroundImage.slice(4, -1).replace(/["|']/g, "");
        }

        throw new Error('Get url invalid strategy detected: ', strategy);
    }

    function _mapPositionToPercent(value) {
        return value * 100 + '%';
    }

    function getBreakpoint() {
        return Utils.getBreakpoint();
    }

    return ProgressiveImage;

});
/**
 * Created by asiulik on 2017-03-02.
 */

( function (window, factory) {

    'use strict';

    if (typeof define == 'function' && define.amd) {

        define('images',[
            'jquery',
            'lodash',
            './config',
            './image',
            './utils/utils'
        ], factory);
    } else if (typeof module == 'object' && module.exports) {
        module.exports = factory(
                require('jquery'),
                require('lodash')
        );
    } else {
        window.progressiveImages = factory(
                window.$,
                window._
        );
    }

}(window, function ($, _, Config, ProgressiveImage, Utils) {

    function Images(layoutInstance) {
        this.layout = layoutInstance;
    }

    Images.prototype.init = function () {

        var progressiveItems = this.getProgressiveItems(document);

        if (this.progressiveImages && this.progressiveImages.length) {
            this.progressiveImages.forEach(function (image) {
                image.delete();
            })
        }

        this.progressiveImages = [];

        this.addItems(progressiveItems);

    };

    Images.prototype.getProgressiveItems = function (container) {
        return container.querySelectorAll('[' + Config.attrNameSlug + ']');
    };

    Images.prototype.addItems = function (collection) {

        var _this = this;

        [].forEach.call(collection, function (progressiveElement) {

            var configString = $(progressiveElement).attr('progressive-image-src-config');
            var config = configString ? JSON.parse(configString.replace(/'/g, '"')) : {};

            var prorgessiveItem = new ProgressiveImage(progressiveElement, _.assign(config, {
                strategy: _this.getStrategyByTag(progressiveElement)
            }));

            prorgessiveItem.init(_this.layout);
            _this.progressiveImages.push(prorgessiveItem)

        });

        return this;

    };

    Images.prototype.getStrategyByTag = function (element) {
        return element.tagName.toLowerCase() === 'image' ?
                Config.IMAGE_STRATEGY : Config.BACKGROUND_STRATEGY;
    };

    Images.prototype.checkBreak = function () {

        [].forEach.call(this.progressiveImages, function (image) {
            image.checkBreakpoint();
        })

    };

    return Images;

}));

}());